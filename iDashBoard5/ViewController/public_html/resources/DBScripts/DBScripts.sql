alter table
   departments
add
   (
   latCoord VARCHAR2(150) ,  
   longCoord VARCHAR2(150) ,
   color VARCHAR2(30) 
   );

update departments 
  set LATCOORD ='47.627132', LONGCOORD ='-122.326576', color ='#854e9b' 
where department_id  = 10;

update departments 
  set LATCOORD ='43.6480789', LONGCOORD ='-79.3955612', color ='#2ebfbc' 
where department_id  = 20;

update departments 
  set LATCOORD ='47.627132', LONGCOORD ='-122.326576', color ='#e85d88' 
where department_id  = 30;

update departments 
  set LATCOORD ='51.510371', LONGCOORD ='-0.087445', color ='#ed813e' 
where department_id  = 40;

update departments 
  set LATCOORD ='37.7003212', LONGCOORD ='-122.4089584', color ='#e95b54' 
where department_id  = 50;

update departments 
  set LATCOORD ='32.9425812', LONGCOORD ='-97.1270981', color ='#5a68ad' 
where department_id  = 60;

update departments 
  set LATCOORD ='48.137538', LONGCOORD ='11.552816', color ='#ca589d' 
where department_id  = 70;

update departments 
  set LATCOORD ='54.5608864', LONGCOORD ='-2.2125118', color ='#81bb5f' 
where department_id  = 80;

update departments 
  set LATCOORD ='47.627132', LONGCOORD ='-122.326576', color ='#989fa8' 
where department_id  = 90;

update departments 
  set LATCOORD ='47.627132', LONGCOORD ='-122.326576', color ='#f4aa46' 
where department_id  = 100;

update departments 
  set LATCOORD ='47.627132', LONGCOORD ='-122.326576', color ='#13b6cf' 
where department_id  = 110;


SELECT 
  DEP.DEPARTMENT_ID,
  DEP.DEPARTMENT_NAME,
  LOC.STREET_ADDRESS,
  LOC.CITY,
  LOC.STATE_PROVINCE,
  CON.COUNTRY_NAME,
  LOC.POSTAL_CODE,
  DEP.MANAGER_ID,
  (SELECT FIRST_NAME FROM EMPLOYEES WHERE EMPLOYEE_ID = DEP.MANAGER_ID) FIRST_NAME,
  (SELECT LAST_NAME FROM EMPLOYEES WHERE EMPLOYEE_ID = DEP.MANAGER_ID) LAST_NAME,
  DEP.LATCOORD,
  DEP.LONGCOORD,
  DEP.COLOR
FROM 
  DEPARTMENTS DEP,LOCATIONS LOC,COUNTRIES CON
WHERE
  DEP.LOCATION_ID = LOC.LOCATION_ID
  AND LOC.COUNTRY_ID = CON.COUNTRY_ID
  AND DEP.MANAGER_ID IS NOT NULL;

SELECT 
EDV.EMPLOYEE_ID,
EDV.FIRST_NAME,
EDV.LAST_NAME,
EDV.JOB_TITLE,
EDV.DEPARTMENT_ID,
EDV.DEPARTMENT_NAME,
EMP.PHONE_NUMBER,
EMP.PHONE_NUMBER,
EMP.EMAIL,
EMP.FIRST_NAME LINKEDIN,
EMP.FIRST_NAME TWITTER,
EMP.FIRST_NAME FACEBOOK,
EMP.FIRST_NAME GOOGLE,
LOC.STREET_ADDRESS,
EDV.CITY,
EDV.STATE_PROVINCE,
EDV.COUNTRY_NAME,
LOC.POSTAL_CODE,
'' RATING,
'' POTENTIAL,
'' COMPRATIO,
EDV.SALARY,
'' BOUNS,
EMP.COMMISSION_PCT,
EDV.MANAGER_ID,
EMP.HIRE_DATE,
(SELECT FIRST_NAME FROM EMPLOYEES WHERE EMPLOYEE_ID = EDV.MANAGER_ID) MGR_FIRST_NM,
(SELECT LAST_NAME FROM EMPLOYEES WHERE EMPLOYEE_ID = EDV.MANAGER_ID) MGR_LAST_NM
FROM 
  EMP_DETAILS_VIEW EDV,
  EMPLOYEES EMP,
  LOCATIONS LOC
WHERE 
  EDV.EMPLOYEE_ID = EMP.EMPLOYEE_ID
  AND EDV.LOCATION_ID = LOC.LOCATION_ID;
  

--Function for handling delete function with constraints
CREATE OR REPLACE FUNCTION DEL_EMP(EMP_ID IN VARCHAR2) 
   RETURN NUMBER 
   IS acc_bal NUMBER(11,2);
   BEGIN 
      update EMPLOYEES set MANAGER_ID = null where MANAGER_ID = EMP_ID;
      update DEPARTMENTS set MANAGER_ID = null where MANAGER_ID = EMP_ID;
      Delete from JOB_HISTORY where employee_id = EMP_ID;
      Delete from Employees where employee_id = EMP_ID;
      
      RETURN(acc_bal); 
    END;


--This trigger is not used in the POC
DROP TRIGGER UPDATE_JOB_HISTORY;

--table to show upload feature
CREATE TABLE "HR"."EMPLOYEES_UPLOAD" 
   (	"EMPLOYEE_ID" NUMBER(6,0), 
	"FIRST_NAME" VARCHAR2(20 BYTE), 
	"LAST_NAME" VARCHAR2(25 BYTE), 
	"PHONE_NUMBER" VARCHAR2(20 BYTE), 
	"SALARY" NUMBER(8,2), 
	"MANAGER_ID" NUMBER(*,0), 
	"DEPARTMENT_ID" NUMBER(*,0),
        PRIMARY KEY (EMPLOYEE_ID)
   )
   
 	
--Trigger to handle assigning IDs when uploading employee files	
CREATE OR REPLACE TRIGGER ASSIGN_EMPLOYEE_ID
BEFORE INSERT ON EMPLOYEES_UPLOAD FOR EACH ROW
BEGIN
  IF :NEW.EMPLOYEE_ID IS NULL OR :NEW.EMPLOYEE_ID < 0 THEN
    SELECT EMPLOYEES_SEQ.NEXTVAL INTO :NEW.EMPLOYEE_ID FROM DUAL;
  END IF;
END;  

----- SQL Scripts for Workflow ----
--Create Table Silbury Tasks
 CREATE TABLE "HR"."SIL_TASK" 
    (   "TASKID" NUMBER, 
	"TASKNAME" VARCHAR2(50 BYTE), 
	"TASKDESC" VARCHAR2(200 BYTE), 
	"TASKWORKFLOW" VARCHAR2(20 BYTE), 
	"TASKCREATEDDATE" DATE, 
	"TASKSTATUS" VARCHAR2(20 BYTE), 
	"TASKCREATOR" VARCHAR2(20 BYTE)
   );


 ALTER TABLE "HR"."SIL_TASK" ADD CONSTRAINT "SIL_TASK_PK" PRIMARY KEY ("TASKID") ENABLE;
 
 ALTER TABLE "HR"."SIL_TASK" MODIFY ("TASKID" NOT NULL ENABLE);
  
 --Create Table Silbury Workflow
 CREATE TABLE "HR"."SIL_WORKFLOW" 
   (	"TASKID" NUMBER, 
	"WFACTIONDATE" DATE, 
	"WFSTEP" VARCHAR2(20 BYTE), 
	"WFUSERINQUEUE" VARCHAR2(20 BYTE), 
	"WFREJECTREASON" VARCHAR2(20 BYTE), 
	"WFCOMPLETION" VARCHAR2(20 BYTE), 
	"WFNAME" VARCHAR2(20 BYTE), 
	"WFLASTACTION" VARCHAR2(20 BYTE), 
	"WFLASTACTIONSTEP" VARCHAR2(20 BYTE)
   );
   
 ALTER TABLE "HR"."SIL_WORKFLOW" ADD CONSTRAINT "SIL_WORKFLOW_PK" PRIMARY KEY ("TASKID");
  
 ALTER TABLE "HR"."SIL_WORKFLOW" MODIFY ("TASKID" NOT NULL ENABLE);
 
 -- Create Sequence
 CREATE SEQUENCE  "HR"."TASKID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 12345670 NOCACHE  NOORDER  NOCYCLE ;


--Steps to enable downloading files
--Open the file weblogic.xml PATH --> ViewController>Web Content>WEB-INF>weblogic.xml
--Open the Container tab and check Enable getRealPath() results for archived web pages
--Save the file

